type: edu
custom_name: Too many ingredients!
files:
- name: blog.py
  visible: true
  text: |
    from sys import argv

    from ini_db import ini_db

    _, db_name = argv
    ini_db(db_name)
  learner_created: false
- name: ini_db.py
  visible: true
  text: |
    from sqlite3 import connect, Connection, Cursor

    DATA = {"meals": ("breakfast", "brunch", "lunch", "supper"),
            "ingredients": ("milk", "cacao", "strawberry", "blueberry", "blackberry", "sugar"),
            "measures": ("ml", "g", "l", "cup", "tbsp", "tsp", "dsp", "")}
    NOT_NULL = {"meals": "NOT NULL",
                "ingredients": "NOT NULL",
                "measures": ""}


    def ini_db(db_name: str):
        conn = connect(db_name)
        cursor = conn.cursor()
        if not table_created(conn, 'meals'):
            create_and_populate_tables(cursor)
            conn.commit()
        cursor.close()
        conn.close()


    def table_created(conn: Connection, table_name: str):
        c = conn.cursor()
        c.execute("SELECT count(name) FROM sqlite_master WHERE type='table' AND name=?", (table_name,))
        return c.fetchone()[0] == 1


    def create_and_populate_tables(cursor: Cursor):
        for name in DATA.keys():
            cursor.execute('''CREATE TABLE {0}s(
                                  {0}_id INTEGER PRIMARY KEY AUTOINCREMENT,
                                  {0}_name TEXT {1} UNIQUE
                           );'''.format(name[:-1], NOT_NULL[name]))
            ins_sql = 'INSERT INTO {0}s({0}_name) VALUES(?);'.format(name[:-1])
            values = [(value,) for value in DATA[name]]
            cursor.executemany(ins_sql, values)
  learner_created: false
- name: tests.py
  visible: false
  text: |+
    import sqlite3
    from hstest import StageTest, CheckResult, WrongAnswer, dynamic_test, TestedProgram
    import os


    class SQLite3Test:

        """It's recommended to keep the sequence:
        1. Create object SQLite3Check
        2. Check is file exists
        3. Establish connection
        4. Check is table exists
        5. Check are columns exists
        6. Do the rest of tests on tables: is column primary key, not null

        To do tests: is unique and is foreign key"""

        cursor_message = f"There is no cursor to connection."  # Is it proper message?
        no_table_message = f"There is no table you are looking for."

        def __init__(self, file_name):  # file_name -> string
            self.file_name = file_name
            self.conn = None
            self.cursor = None

        def is_file_exist(self):
            if not os.path.exists(self.file_name):
                return f"The file '{self.file_name}' does not exist or is outside of the script directory."
            return False

        def connect(self):
            ans = self.is_file_exist()
            if ans:
                return ans
            try:
                self.conn = sqlite3.connect(self.file_name)
                self.cursor = self.conn.cursor()
            except sqlite3.OperationalError:
                raise WrongAnswer(f"DataBase {self.file_name} may be locked.")

        def close(self):
            try:
                self.conn.close()
            except AttributeError:
                raise WrongAnswer(self.cursor_message)

        def run_query(self, query):
            try:
                lines = self.cursor.execute(f"{query}")
            except AttributeError:
                raise WrongAnswer(self.cursor_message)
            except sqlite3.OperationalError:
                self.close()
                raise WrongAnswer(self.no_table_message)
            return lines

        def is_table_exist(self, name):  # table name -> string
            lines = self.run_query(f"SELECT count(name) FROM sqlite_master WHERE type='table' AND name='{name}';").fetchall()
            if lines[0][0] == 0:
                self.close()
                raise WrongAnswer(f"There is no table named '{name}' in database {self.file_name}")

        def number_of_records(self, name, expected_lines):   # table name -> string, expected_lines -> integer
            lines = self.run_query(f"SELECT COUNT(*) FROM {name}").fetchone()[0]
            if lines != expected_lines:
                self.close()
                raise WrongAnswer(f"Wrong number of records in table {name}. Expected {expected_lines}, found {lines}")

        def is_column_exist(self, name, names):  # table name -> string, column names -> list of strings for all columns, or list with one string for one column
            lines = self.run_query(f'select * from {name}').description
            if len(names) != 1:
                if sorted(names) != sorted([line[0] for line in lines]):
                    self.close()
                    raise WrongAnswer(f"There is something wrong in table {name}. Found column names: {[line[0] for line in lines]}. Expected {names}'")
            else:
                if not any([names[0] == c_name for c_name in [line[0] for line in lines]]):
                    self.close()
                    raise WrongAnswer(f"There is something wrong in table {name}. Found column names: {[line[0] for line in lines]}. Expected to find '{names[0]}'")

        def table_info(self, name, column, attribute):   # table name -> string, column name -> string, attr ("PK" Primary Key; "NN" Not null)
            lines = self.run_query(f"PRAGMA table_info({name})").fetchall()
            if column not in [line[1] for line in lines]:
                raise WrongAnswer(f"There is no column {column}.")
            for line in lines:
                if attribute == "PK":
                    if line[1] == column and line[5] != 1:
                        self.close()
                        raise WrongAnswer(f"There is no PRIMARY KEY parameter in {name} on column {column}.")
                elif attribute == "NN":
                    if line[1] == column and line[3] != 1:
                        return CheckResult.wrong(f"There is no NOT NULL parameter in {name} on column {column}.")

        def is_unique(self, name, column):  # table name -> string, column name -> string
            lines = self.run_query(f"SELECT inf.name FROM pragma_index_list('{name}') as lst, pragma_index_info(lst.name) as inf WHERE lst.[unique] = 1;").fetchall()
            if not any([column in line for line in lines]):
                raise WrongAnswer(f"There is no UNIQUE parameter in {name} on column {column}.")
            return True

        def is_foreign_key(self, name, column):  # table name -> string, column name -> string
            lines = self.run_query(f"SELECT * FROM pragma_foreign_key_list('{name}');").fetchall()
            if not any([column in line for line in lines]):
                raise WrongAnswer(f"There is no FOREIGN KEY parameter in {name} on column {column}.")
            return True


    class FoodBlogStage1(StageTest):
        @dynamic_test
        def test(self):
            #  (table, (columns,), nr_of_records, (PK, ), ((NOT NULL, ), (not NOT NULL, )), ((FK, ), (not FK, )), ((UNIQUE, ), (not UNIQUE, )))
            test_data = ("food_blog.db",
                        (
                                ("measures", ("measure_id", "measure_name"), 8, ("measure_id", ), ((), ("measure_name", )), ((), ()), (("measure_name", ), ())),
                                ("ingredients", ("ingredient_id", "ingredient_name"), 6, ("ingredient_id", ), (("ingredient_name",), ()), ((), ()), (("ingredient_name", ), ())),
                                ("meals", ("meal_id", "meal_name"), 4, ("meal_id", ), (("meal_name",), ()), ((), ()), (("meal_name", ), ())),
                                ("recipes", ("recipe_id", "recipe_name", "recipe_description"), 0, ("recipe_id", ), (("recipe_name", ), ("recipe_description", )), ((), ()), ((), ("recipe_name", "recipe_description",))),
                                ("serve", ("serve_id", "recipe_id", "meal_id"), 0, ("serve_id", ), (("recipe_id", "meal_id"), ()), (("recipe_id", "meal_id"), ()), ((), ())),
                                ("quantity", ("quantity_id", "quantity", "recipe_id", "measure_id", "ingredient_id"), 0, ("quantity_id", ), (("quantity", "recipe_id", "measure_id", "ingredient_id"), ()), (("recipe_id", "measure_id", "ingredient_id"), ()), ((), ())),
                        ))

            dbase = SQLite3Test(test_data[0])

            if not dbase.is_file_exist():
                try:
                    os.remove(test_data[0])
                except:
                    return CheckResult.wrong("Can't delete the database file! Make sure it is not used by other processes!")

            pr = TestedProgram()
            pr.start(test_data[0])

            ans = dbase.is_file_exist()
            if ans:
                return CheckResult.wrong(f"The file '{dbase.file_name}' does not exist or is outside of the script directory.")

            dbase.connect()

            for table in test_data[1]:
                dbase.is_table_exist(table[0])

                dbase.is_column_exist(table[0], table[1])

                dbase.number_of_records(table[0], table[2])

                for column in table[3]:
                    dbase.table_info(table[0], column, "PK")

                for column in table[4][0]:
                    ans = dbase.table_info(table[0], column, "NN")
                    if ans:
                        return ans

                for column in table[4][1]:
                    if not dbase.table_info(table[0], column, "NN"):
                        dbase.close()
                        return CheckResult.wrong(f"Column {column} in table {table[0]} should not have Not Null attribute.")

                for column in table[5][0]:
                    dbase.is_foreign_key(table[0], column)

                for column in table[6][0]:
                    dbase.is_unique(table[0], column)

            #  (table, (columns,), nr_of_records, (PK, ), ((NOT NULL, ), (not NOT NULL, )), ((FK, ), (not FK, )), ((UNIQUE, ), (not UNIQUE, )))
            for item in ("Milkshake\nBlend all ingredients and put in the fridge.\n1 3 4\n500 ml milk\n1 cup strawberry\n1 tbsp sugar\n",
                            "\n",
                            "Hot cacao\nPour the ingredients into the hot milk. Mix it up.\n1 2\n250 ml milk\n2 tbsp cacao\n",
                            "\n",
                            "Hot cacao\nPour the ingredients into the hot milk. Mix it up.\n1 4\n250 ml milk\n2 tbsp cacao\n1 tsp sugar\n",
                            "\n",
                            "Fruit salad\nCut strawberries and mix with other fruits. you can sprinkle everything with sugar.\n3 4\n100 g strawberry\n50 g black\n1 cup blue\n1 tsp sugar\n",
                            "\n",
                            "\n"):
                pr.execute(item)

            dbase.number_of_records("recipes", 4)
            dbase.number_of_records("serve", 9)
            dbase.number_of_records("quantity", 12)

            if not pr.is_finished():
                return CheckResult.wrong("Your program unnecessarily waiting for input.")

            dbase.close()
            if not dbase.is_file_exist():
                try:
                    os.remove(test_data[0])
                except:
                    return CheckResult.wrong("Looks like you didn't close connection with the database"
                                             " at the end of the program!")

            return CheckResult.correct()


    if __name__ == '__main__':
        FoodBlogStage1().run_tests()

  learner_created: false
- name: food_blog_menus.py
  visible: true
  text: |
    from dao.recipe_dao import RecipeDao, RecipeItem, ServeItem, QuantityItem


    def return_0(fn):
        def wrapper(*args):
            fn(*args)
            return 0

        return wrapper


    class FoodBlogMenus:
        def __init__(self, recipe_dao: RecipeDao):
            self._recipe_dao = recipe_dao
            self._current_recipe = RecipeItem()
            self._saved_recipe_id = 0
            meal_items = recipe_dao.read_meal_items()
            self._meal_items_dict = {meal.id: meal for meal in meal_items}
            self._serve_dish_for_meal_prompt = '  '.join(f'{meal.id}) {meal.name}' for meal in meal_items)

        @return_0
        def welcome_msg(self):
            print('Pass the empty recipe name to exit.')

        def read_recipe_name(self) -> int:
            name = input('Recipe name: ')
            if not name:
                return 0
            self._current_recipe.name = name
            return 1

        @return_0
        def read_recipe_desc(self):
            self._current_recipe.description = input('Recipe description: ')
            self._saved_recipe_id = self._recipe_dao.save_recipe(self._current_recipe)
            self._current_recipe = RecipeItem()

        @return_0
        def read_meals_for_dish(self):
            raw = input(self._serve_dish_for_meal_prompt +
                        '\nWhen the dish can be served: ')
            meal_ids = [int(meal_id) for meal_id in raw.split()]
            serve_items = [ServeItem(recipe_id=self._saved_recipe_id, meal_id=meal_id) for meal_id in meal_ids]
            self._recipe_dao.save_serve_items(serve_items)

        def read_quantity(self) -> int:
            raw = input('Input quantity of ingredient <press enter to stop>: ')
            if not raw:
                return 0
            q_list = raw.split()
            [q, m, i] = q_list if len(q_list) == 3 else [q_list[0], '', q_list[1]]

            measure = self._recipe_dao.get_measure_by_name(m)
            if not measure:
                return self.print_not_conclusive_error('measure')

            ingredient = self._recipe_dao.get_ingredient_by_name(i)
            if not ingredient:
                return self.print_not_conclusive_error('ingredient')

            q_item = QuantityItem(quantity=int(q),
                                  recipe_id=self._saved_recipe_id,
                                  measure_id=measure.id,
                                  ingredient_id=ingredient.id)
            self._recipe_dao.save_quantity_item(q_item)
            return 1

        @staticmethod
        def print_not_conclusive_error(name):
            print(f'The {name} is not conclusive!')
            return 1
  learner_created: true
- name: state/state_machine.py
  visible: true
  text: |
    from typing import Dict

    from .state_transition import StateTransition


    class StateMachineRunner:
        """
        A class for switching states, for the State Machine implementation,
        until the current state becomes a terminal one
        """
        def __init__(self, transition_dict: Dict[str, StateTransition], initial_state: str):
            self._transition_dict = transition_dict
            self._state = initial_state

        def run(self):
            while len(self._state):
                self._state = self._transition_dict.get(self._state).next_state()
  learner_created: true
- name: state_machine_factory.py
  visible: true
  text: |+
    from enum import Enum, auto
    from typing import Dict

    from state.state_transition import StateTransition
    from food_blog_menus import FoodBlogMenus


    class State(Enum):
        WELCOME_MSG = auto()
        ENTER_RECIPE_NAME = auto()
        ENTER_RECIPE_DESC = auto()
        ENTER_MEALS_NUMBERS_FOR_DISH = auto()
        ENTER_INGREDIENTS_QUANTITY = auto()

        EXIT = auto()


    class StateMachineFactory:

        def __init__(self, menus: FoodBlogMenus):
            self._menus = menus

        def get_state_dict(self) -> Dict[str, StateTransition]:
            trans_list = [
                StateTransition(State.WELCOME_MSG.name,
                                {0: State.ENTER_RECIPE_NAME.name},
                                self._menus.welcome_msg),

                StateTransition(State.ENTER_RECIPE_NAME.name,
                                {0: State.EXIT.name,
                                 1: State.ENTER_RECIPE_DESC.name},
                                self._menus.read_recipe_name),

                StateTransition(State.ENTER_RECIPE_DESC.name,
                                {0: State.ENTER_MEALS_NUMBERS_FOR_DISH.name},
                                self._menus.read_recipe_desc),

                StateTransition(State.ENTER_MEALS_NUMBERS_FOR_DISH.name,
                                {0: State.ENTER_INGREDIENTS_QUANTITY.name},
                                self._menus.read_meals_for_dish),

                StateTransition(State.ENTER_INGREDIENTS_QUANTITY.name,
                                {0: State.ENTER_RECIPE_NAME.name,
                                 1: State.ENTER_INGREDIENTS_QUANTITY.name},
                                self._menus.read_quantity),

                StateTransition(State.EXIT.name,
                                {0: ''},
                                lambda: 0)

            ]
            return {st.state_name: st for st in trans_list}

  learner_created: true
feedback_link: https://hyperskill.org/learn/step/12377#comment
status: Solved
feedback:
  message: Congratulations!
  time: Wed, 26 Oct 2022 17:42:15 UTC
record: 4
